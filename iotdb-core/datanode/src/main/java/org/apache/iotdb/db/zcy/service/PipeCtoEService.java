/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.apache.iotdb.db.zcy.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(
    value = "Autogenerated by Thrift Compiler (0.13.0)",
    date = "2024-09-24")
public class PipeCtoEService {

  public interface Iface {

    public void PipeStart(String sql) throws org.apache.thrift.TException;

    public void AnsMessage(int EdgeFragmentId, int SourceId, int ReadOffset)
        throws org.apache.thrift.TException;

    public void AnsAggreMessage(int EdgeFragmentId, int SourceId, long StartTime)
        throws org.apache.thrift.TException;

    public void PipeClose() throws org.apache.thrift.TException;
  }

  public interface AsyncIface {

    public void PipeStart(
        String sql, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;

    public void AnsMessage(
        int EdgeFragmentId,
        int SourceId,
        int ReadOffset,
        org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;

    public void AnsAggreMessage(
        int EdgeFragmentId,
        int SourceId,
        long StartTime,
        org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;

    public void PipeClose(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException;
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(
          org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(
        org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void PipeStart(String sql) throws org.apache.thrift.TException {
      send_PipeStart(sql);
      recv_PipeStart();
    }

    public void send_PipeStart(String sql) throws org.apache.thrift.TException {
      PipeStart_args args = new PipeStart_args();
      args.setSql(sql);
      sendBase("PipeStart", args);
    }

    public void recv_PipeStart() throws org.apache.thrift.TException {
      PipeStart_result result = new PipeStart_result();
      receiveBase(result, "PipeStart");
      return;
    }

    public void AnsMessage(int EdgeFragmentId, int SourceId, int ReadOffset)
        throws org.apache.thrift.TException {
      send_AnsMessage(EdgeFragmentId, SourceId, ReadOffset);
      recv_AnsMessage();
    }

    public void send_AnsMessage(int EdgeFragmentId, int SourceId, int ReadOffset)
        throws org.apache.thrift.TException {
      AnsMessage_args args = new AnsMessage_args();
      args.setEdgeFragmentId(EdgeFragmentId);
      args.setSourceId(SourceId);
      args.setReadOffset(ReadOffset);
      sendBase("AnsMessage", args);
    }

    public void recv_AnsMessage() throws org.apache.thrift.TException {
      AnsMessage_result result = new AnsMessage_result();
      receiveBase(result, "AnsMessage");
      return;
    }

    public void AnsAggreMessage(int EdgeFragmentId, int SourceId, long StartTime)
        throws org.apache.thrift.TException {
      send_AnsAggreMessage(EdgeFragmentId, SourceId, StartTime);
      recv_AnsAggreMessage();
    }

    public void send_AnsAggreMessage(int EdgeFragmentId, int SourceId, long StartTime)
        throws org.apache.thrift.TException {
      AnsAggreMessage_args args = new AnsAggreMessage_args();
      args.setEdgeFragmentId(EdgeFragmentId);
      args.setSourceId(SourceId);
      args.setStartTime(StartTime);
      sendBase("AnsAggreMessage", args);
    }

    public void recv_AnsAggreMessage() throws org.apache.thrift.TException {
      AnsAggreMessage_result result = new AnsAggreMessage_result();
      receiveBase(result, "AnsAggreMessage");
      return;
    }

    public void PipeClose() throws org.apache.thrift.TException {
      send_PipeClose();
      recv_PipeClose();
    }

    public void send_PipeClose() throws org.apache.thrift.TException {
      PipeClose_args args = new PipeClose_args();
      sendBase("PipeClose", args);
    }

    public void recv_PipeClose() throws org.apache.thrift.TException {
      PipeClose_result result = new PipeClose_result();
      receiveBase(result, "PipeClose");
      return;
    }
  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
      implements AsyncIface {
    public static class Factory
        implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(
          org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void PipeStart(
        String sql, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      PipeStart_call method_call =
          new PipeStart_call(sql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PipeStart_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String sql;

      public PipeStart_call(
          String sql,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "PipeStart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PipeStart_args args = new PipeStart_args();
        args.setSql(sql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void AnsMessage(
        int EdgeFragmentId,
        int SourceId,
        int ReadOffset,
        org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      AnsMessage_call method_call =
          new AnsMessage_call(
              EdgeFragmentId,
              SourceId,
              ReadOffset,
              resultHandler,
              this,
              ___protocolFactory,
              ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AnsMessage_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int EdgeFragmentId;
      private int SourceId;
      private int ReadOffset;

      public AnsMessage_call(
          int EdgeFragmentId,
          int SourceId,
          int ReadOffset,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EdgeFragmentId = EdgeFragmentId;
        this.SourceId = SourceId;
        this.ReadOffset = ReadOffset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "AnsMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AnsMessage_args args = new AnsMessage_args();
        args.setEdgeFragmentId(EdgeFragmentId);
        args.setSourceId(SourceId);
        args.setReadOffset(ReadOffset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void AnsAggreMessage(
        int EdgeFragmentId,
        int SourceId,
        long StartTime,
        org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      AnsAggreMessage_call method_call =
          new AnsAggreMessage_call(
              EdgeFragmentId,
              SourceId,
              StartTime,
              resultHandler,
              this,
              ___protocolFactory,
              ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AnsAggreMessage_call
        extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int EdgeFragmentId;
      private int SourceId;
      private long StartTime;

      public AnsAggreMessage_call(
          int EdgeFragmentId,
          int SourceId,
          long StartTime,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EdgeFragmentId = EdgeFragmentId;
        this.SourceId = SourceId;
        this.StartTime = StartTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "AnsAggreMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AnsAggreMessage_args args = new AnsAggreMessage_args();
        args.setEdgeFragmentId(EdgeFragmentId);
        args.setSourceId(SourceId);
        args.setStartTime(StartTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void PipeClose(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      PipeClose_call method_call =
          new PipeClose_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PipeClose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public PipeClose_call(
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "PipeClose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PipeClose_args args = new PipeClose_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  String,
                  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        java.util.Map<
                String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface>
        java.util.Map<
                String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            getProcessMap(
                java.util.Map<
                        String,
                        org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
                    processMap) {
      processMap.put("PipeStart", new PipeStart());
      processMap.put("AnsMessage", new AnsMessage());
      processMap.put("AnsAggreMessage", new AnsAggreMessage());
      processMap.put("PipeClose", new PipeClose());
      return processMap;
    }

    public static class PipeStart<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, PipeStart_args> {
      public PipeStart() {
        super("PipeStart");
      }

      public PipeStart_args getEmptyArgsInstance() {
        return new PipeStart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public PipeStart_result getResult(I iface, PipeStart_args args)
          throws org.apache.thrift.TException {
        PipeStart_result result = new PipeStart_result();
        iface.PipeStart(args.sql);
        return result;
      }
    }

    public static class AnsMessage<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, AnsMessage_args> {
      public AnsMessage() {
        super("AnsMessage");
      }

      public AnsMessage_args getEmptyArgsInstance() {
        return new AnsMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public AnsMessage_result getResult(I iface, AnsMessage_args args)
          throws org.apache.thrift.TException {
        AnsMessage_result result = new AnsMessage_result();
        iface.AnsMessage(args.EdgeFragmentId, args.SourceId, args.ReadOffset);
        return result;
      }
    }

    public static class AnsAggreMessage<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, AnsAggreMessage_args> {
      public AnsAggreMessage() {
        super("AnsAggreMessage");
      }

      public AnsAggreMessage_args getEmptyArgsInstance() {
        return new AnsAggreMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public AnsAggreMessage_result getResult(I iface, AnsAggreMessage_args args)
          throws org.apache.thrift.TException {
        AnsAggreMessage_result result = new AnsAggreMessage_result();
        iface.AnsAggreMessage(args.EdgeFragmentId, args.SourceId, args.StartTime);
        return result;
      }
    }

    public static class PipeClose<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, PipeClose_args> {
      public PipeClose() {
        super("PipeClose");
      }

      public PipeClose_args getEmptyArgsInstance() {
        return new PipeClose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public PipeClose_result getResult(I iface, PipeClose_args args)
          throws org.apache.thrift.TException {
        PipeClose_result result = new PipeClose_result();
        iface.PipeClose();
        return result;
      }
    }
  }

  public static class AsyncProcessor<I extends AsyncIface>
      extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER =
        org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(
          iface,
          getProcessMap(
              new java.util.HashMap<
                  String,
                  org.apache.thrift.AsyncProcessFunction<
                      I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(
        I iface,
        java.util.Map<
                String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface>
        java.util.Map<
                String,
                org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            getProcessMap(
                java.util.Map<
                        String,
                        org.apache.thrift.AsyncProcessFunction<
                            I, ? extends org.apache.thrift.TBase, ?>>
                    processMap) {
      processMap.put("PipeStart", new PipeStart());
      processMap.put("AnsMessage", new AnsMessage());
      processMap.put("AnsAggreMessage", new AnsAggreMessage());
      processMap.put("PipeClose", new PipeClose());
      return processMap;
    }

    public static class PipeStart<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, PipeStart_args, Void> {
      public PipeStart() {
        super("PipeStart");
      }

      public PipeStart_args getEmptyArgsInstance() {
        return new PipeStart_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            PipeStart_result result = new PipeStart_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            PipeStart_result result = new PipeStart_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          PipeStart_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.PipeStart(args.sql, resultHandler);
      }
    }

    public static class AnsMessage<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, AnsMessage_args, Void> {
      public AnsMessage() {
        super("AnsMessage");
      }

      public AnsMessage_args getEmptyArgsInstance() {
        return new AnsMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            AnsMessage_result result = new AnsMessage_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AnsMessage_result result = new AnsMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          AnsMessage_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.AnsMessage(args.EdgeFragmentId, args.SourceId, args.ReadOffset, resultHandler);
      }
    }

    public static class AnsAggreMessage<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, AnsAggreMessage_args, Void> {
      public AnsAggreMessage() {
        super("AnsAggreMessage");
      }

      public AnsAggreMessage_args getEmptyArgsInstance() {
        return new AnsAggreMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            AnsAggreMessage_result result = new AnsAggreMessage_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AnsAggreMessage_result result = new AnsAggreMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          AnsAggreMessage_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.AnsAggreMessage(args.EdgeFragmentId, args.SourceId, args.StartTime, resultHandler);
      }
    }

    public static class PipeClose<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, PipeClose_args, Void> {
      public PipeClose() {
        super("PipeClose");
      }

      public PipeClose_args getEmptyArgsInstance() {
        return new PipeClose_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb,
          final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            PipeClose_result result = new PipeClose_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            PipeClose_result result = new PipeClose_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  new org.apache.thrift.TApplicationException(
                      org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          PipeClose_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws org.apache.thrift.TException {
        iface.PipeClose(resultHandler);
      }
    }
  }

  public static class PipeStart_args
      implements org.apache.thrift.TBase<PipeStart_args, PipeStart_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<PipeStart_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("PipeStart_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "sql", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new PipeStart_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new PipeStart_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String sql; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short) 1, "sql");

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SQL
            return SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SQL,
          new org.apache.thrift.meta_data.FieldMetaData(
              "sql",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          PipeStart_args.class, metaDataMap);
    }

    public PipeStart_args() {}

    public PipeStart_args(String sql) {
      this();
      this.sql = sql;
    }

    /** Performs a deep copy on <i>other</i>. */
    public PipeStart_args(PipeStart_args other) {
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
    }

    public PipeStart_args deepCopy() {
      return new PipeStart_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getSql() {
      return this.sql;
    }

    public PipeStart_args setSql(@org.apache.thrift.annotation.Nullable String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
        case SQL:
          if (value == null) {
            unsetSql();
          } else {
            setSql((String) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SQL:
          return getSql();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SQL:
          return isSetSql();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof PipeStart_args) return this.equals((PipeStart_args) that);
      return false;
    }

    public boolean equals(PipeStart_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql)) return false;
        if (!this.sql.equals(that.sql)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql()) hashCode = hashCode * 8191 + sql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PipeStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PipeStart_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PipeStart_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeStart_argsStandardScheme getScheme() {
        return new PipeStart_argsStandardScheme();
      }
    }

    private static class PipeStart_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<PipeStart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PipeStart_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PipeStart_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class PipeStart_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeStart_argsTupleScheme getScheme() {
        return new PipeStart_argsTupleScheme();
      }
    }

    private static class PipeStart_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<PipeStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PipeStart_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PipeStart_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class PipeStart_result
      implements org.apache.thrift.TBase<PipeStart_result, PipeStart_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<PipeStart_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("PipeStart_result");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new PipeStart_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new PipeStart_resultTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          PipeStart_result.class, metaDataMap);
    }

    public PipeStart_result() {}

    /** Performs a deep copy on <i>other</i>. */
    public PipeStart_result(PipeStart_result other) {}

    public PipeStart_result deepCopy() {
      return new PipeStart_result(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof PipeStart_result) return this.equals((PipeStart_result) that);
      return false;
    }

    public boolean equals(PipeStart_result that) {
      if (that == null) return false;
      if (this == that) return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(PipeStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PipeStart_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PipeStart_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeStart_resultStandardScheme getScheme() {
        return new PipeStart_resultStandardScheme();
      }
    }

    private static class PipeStart_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<PipeStart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PipeStart_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PipeStart_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class PipeStart_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeStart_resultTupleScheme getScheme() {
        return new PipeStart_resultTupleScheme();
      }
    }

    private static class PipeStart_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<PipeStart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PipeStart_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PipeStart_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class AnsMessage_args
      implements org.apache.thrift.TBase<AnsMessage_args, AnsMessage_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<AnsMessage_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("AnsMessage_args");

    private static final org.apache.thrift.protocol.TField EDGE_FRAGMENT_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "EdgeFragmentId", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "SourceId", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField READ_OFFSET_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "ReadOffset", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new AnsMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new AnsMessage_argsTupleSchemeFactory();

    public int EdgeFragmentId; // required
    public int SourceId; // required
    public int ReadOffset; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE_FRAGMENT_ID((short) 1, "EdgeFragmentId"),
      SOURCE_ID((short) 2, "SourceId"),
      READ_OFFSET((short) 3, "ReadOffset");

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // EDGE_FRAGMENT_ID
            return EDGE_FRAGMENT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          case 3: // READ_OFFSET
            return READ_OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGEFRAGMENTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private static final int __READOFFSET_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.EDGE_FRAGMENT_ID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "EdgeFragmentId",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.SOURCE_ID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "SourceId",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.READ_OFFSET,
          new org.apache.thrift.meta_data.FieldMetaData(
              "ReadOffset",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          AnsMessage_args.class, metaDataMap);
    }

    public AnsMessage_args() {}

    public AnsMessage_args(int EdgeFragmentId, int SourceId, int ReadOffset) {
      this();
      this.EdgeFragmentId = EdgeFragmentId;
      setEdgeFragmentIdIsSet(true);
      this.SourceId = SourceId;
      setSourceIdIsSet(true);
      this.ReadOffset = ReadOffset;
      setReadOffsetIsSet(true);
    }

    /** Performs a deep copy on <i>other</i>. */
    public AnsMessage_args(AnsMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.EdgeFragmentId = other.EdgeFragmentId;
      this.SourceId = other.SourceId;
      this.ReadOffset = other.ReadOffset;
    }

    public AnsMessage_args deepCopy() {
      return new AnsMessage_args(this);
    }

    @Override
    public void clear() {
      setEdgeFragmentIdIsSet(false);
      this.EdgeFragmentId = 0;
      setSourceIdIsSet(false);
      this.SourceId = 0;
      setReadOffsetIsSet(false);
      this.ReadOffset = 0;
    }

    public int getEdgeFragmentId() {
      return this.EdgeFragmentId;
    }

    public AnsMessage_args setEdgeFragmentId(int EdgeFragmentId) {
      this.EdgeFragmentId = EdgeFragmentId;
      setEdgeFragmentIdIsSet(true);
      return this;
    }

    public void unsetEdgeFragmentId() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGEFRAGMENTID_ISSET_ID);
    }

    /**
     * Returns true if field EdgeFragmentId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEdgeFragmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGEFRAGMENTID_ISSET_ID);
    }

    public void setEdgeFragmentIdIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(
              __isset_bitfield, __EDGEFRAGMENTID_ISSET_ID, value);
    }

    public int getSourceId() {
      return this.SourceId;
    }

    public AnsMessage_args setSourceId(int SourceId) {
      this.SourceId = SourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field SourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public int getReadOffset() {
      return this.ReadOffset;
    }

    public AnsMessage_args setReadOffset(int ReadOffset) {
      this.ReadOffset = ReadOffset;
      setReadOffsetIsSet(true);
      return this;
    }

    public void unsetReadOffset() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READOFFSET_ISSET_ID);
    }

    /** Returns true if field ReadOffset is set (has been assigned a value) and false otherwise */
    public boolean isSetReadOffset() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READOFFSET_ISSET_ID);
    }

    public void setReadOffsetIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READOFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
        case EDGE_FRAGMENT_ID:
          if (value == null) {
            unsetEdgeFragmentId();
          } else {
            setEdgeFragmentId((Integer) value);
          }
          break;

        case SOURCE_ID:
          if (value == null) {
            unsetSourceId();
          } else {
            setSourceId((Integer) value);
          }
          break;

        case READ_OFFSET:
          if (value == null) {
            unsetReadOffset();
          } else {
            setReadOffset((Integer) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EDGE_FRAGMENT_ID:
          return getEdgeFragmentId();

        case SOURCE_ID:
          return getSourceId();

        case READ_OFFSET:
          return getReadOffset();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EDGE_FRAGMENT_ID:
          return isSetEdgeFragmentId();
        case SOURCE_ID:
          return isSetSourceId();
        case READ_OFFSET:
          return isSetReadOffset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof AnsMessage_args) return this.equals((AnsMessage_args) that);
      return false;
    }

    public boolean equals(AnsMessage_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_EdgeFragmentId = true;
      boolean that_present_EdgeFragmentId = true;
      if (this_present_EdgeFragmentId || that_present_EdgeFragmentId) {
        if (!(this_present_EdgeFragmentId && that_present_EdgeFragmentId)) return false;
        if (this.EdgeFragmentId != that.EdgeFragmentId) return false;
      }

      boolean this_present_SourceId = true;
      boolean that_present_SourceId = true;
      if (this_present_SourceId || that_present_SourceId) {
        if (!(this_present_SourceId && that_present_SourceId)) return false;
        if (this.SourceId != that.SourceId) return false;
      }

      boolean this_present_ReadOffset = true;
      boolean that_present_ReadOffset = true;
      if (this_present_ReadOffset || that_present_ReadOffset) {
        if (!(this_present_ReadOffset && that_present_ReadOffset)) return false;
        if (this.ReadOffset != that.ReadOffset) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + EdgeFragmentId;

      hashCode = hashCode * 8191 + SourceId;

      hashCode = hashCode * 8191 + ReadOffset;

      return hashCode;
    }

    @Override
    public int compareTo(AnsMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison =
          Boolean.valueOf(isSetEdgeFragmentId()).compareTo(other.isSetEdgeFragmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeFragmentId()) {
        lastComparison =
            org.apache.thrift.TBaseHelper.compareTo(this.EdgeFragmentId, other.EdgeFragmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SourceId, other.SourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReadOffset()).compareTo(other.isSetReadOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReadOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReadOffset, other.ReadOffset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AnsMessage_args(");
      boolean first = true;

      sb.append("EdgeFragmentId:");
      sb.append(this.EdgeFragmentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("SourceId:");
      sb.append(this.SourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ReadOffset:");
      sb.append(this.ReadOffset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AnsMessage_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsMessage_argsStandardScheme getScheme() {
        return new AnsMessage_argsStandardScheme();
      }
    }

    private static class AnsMessage_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<AnsMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AnsMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE_FRAGMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.EdgeFragmentId = iprot.readI32();
                struct.setEdgeFragmentIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SourceId = iprot.readI32();
                struct.setSourceIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // READ_OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ReadOffset = iprot.readI32();
                struct.setReadOffsetIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AnsMessage_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EDGE_FRAGMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.EdgeFragmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI32(struct.SourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(READ_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.ReadOffset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class AnsMessage_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsMessage_argsTupleScheme getScheme() {
        return new AnsMessage_argsTupleScheme();
      }
    }

    private static class AnsMessage_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<AnsMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AnsMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEdgeFragmentId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        if (struct.isSetReadOffset()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEdgeFragmentId()) {
          oprot.writeI32(struct.EdgeFragmentId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI32(struct.SourceId);
        }
        if (struct.isSetReadOffset()) {
          oprot.writeI32(struct.ReadOffset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AnsMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.EdgeFragmentId = iprot.readI32();
          struct.setEdgeFragmentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.SourceId = iprot.readI32();
          struct.setSourceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ReadOffset = iprot.readI32();
          struct.setReadOffsetIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class AnsMessage_result
      implements org.apache.thrift.TBase<AnsMessage_result, AnsMessage_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<AnsMessage_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("AnsMessage_result");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new AnsMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new AnsMessage_resultTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          AnsMessage_result.class, metaDataMap);
    }

    public AnsMessage_result() {}

    /** Performs a deep copy on <i>other</i>. */
    public AnsMessage_result(AnsMessage_result other) {}

    public AnsMessage_result deepCopy() {
      return new AnsMessage_result(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof AnsMessage_result) return this.equals((AnsMessage_result) that);
      return false;
    }

    public boolean equals(AnsMessage_result that) {
      if (that == null) return false;
      if (this == that) return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(AnsMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AnsMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AnsMessage_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsMessage_resultStandardScheme getScheme() {
        return new AnsMessage_resultStandardScheme();
      }
    }

    private static class AnsMessage_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<AnsMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AnsMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AnsMessage_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class AnsMessage_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsMessage_resultTupleScheme getScheme() {
        return new AnsMessage_resultTupleScheme();
      }
    }

    private static class AnsMessage_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<AnsMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AnsMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AnsMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class AnsAggreMessage_args
      implements org.apache.thrift.TBase<AnsAggreMessage_args, AnsAggreMessage_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<AnsAggreMessage_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("AnsAggreMessage_args");

    private static final org.apache.thrift.protocol.TField EDGE_FRAGMENT_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "EdgeFragmentId", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "SourceId", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "StartTime", org.apache.thrift.protocol.TType.I64, (short) 3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new AnsAggreMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new AnsAggreMessage_argsTupleSchemeFactory();

    public int EdgeFragmentId; // required
    public int SourceId; // required
    public long StartTime; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE_FRAGMENT_ID((short) 1, "EdgeFragmentId"),
      SOURCE_ID((short) 2, "SourceId"),
      START_TIME((short) 3, "StartTime");

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // EDGE_FRAGMENT_ID
            return EDGE_FRAGMENT_ID;
          case 2: // SOURCE_ID
            return SOURCE_ID;
          case 3: // START_TIME
            return START_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGEFRAGMENTID_ISSET_ID = 0;
    private static final int __SOURCEID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.EDGE_FRAGMENT_ID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "EdgeFragmentId",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.SOURCE_ID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "SourceId",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.START_TIME,
          new org.apache.thrift.meta_data.FieldMetaData(
              "StartTime",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          AnsAggreMessage_args.class, metaDataMap);
    }

    public AnsAggreMessage_args() {}

    public AnsAggreMessage_args(int EdgeFragmentId, int SourceId, long StartTime) {
      this();
      this.EdgeFragmentId = EdgeFragmentId;
      setEdgeFragmentIdIsSet(true);
      this.SourceId = SourceId;
      setSourceIdIsSet(true);
      this.StartTime = StartTime;
      setStartTimeIsSet(true);
    }

    /** Performs a deep copy on <i>other</i>. */
    public AnsAggreMessage_args(AnsAggreMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.EdgeFragmentId = other.EdgeFragmentId;
      this.SourceId = other.SourceId;
      this.StartTime = other.StartTime;
    }

    public AnsAggreMessage_args deepCopy() {
      return new AnsAggreMessage_args(this);
    }

    @Override
    public void clear() {
      setEdgeFragmentIdIsSet(false);
      this.EdgeFragmentId = 0;
      setSourceIdIsSet(false);
      this.SourceId = 0;
      setStartTimeIsSet(false);
      this.StartTime = 0;
    }

    public int getEdgeFragmentId() {
      return this.EdgeFragmentId;
    }

    public AnsAggreMessage_args setEdgeFragmentId(int EdgeFragmentId) {
      this.EdgeFragmentId = EdgeFragmentId;
      setEdgeFragmentIdIsSet(true);
      return this;
    }

    public void unsetEdgeFragmentId() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGEFRAGMENTID_ISSET_ID);
    }

    /**
     * Returns true if field EdgeFragmentId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetEdgeFragmentId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGEFRAGMENTID_ISSET_ID);
    }

    public void setEdgeFragmentIdIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(
              __isset_bitfield, __EDGEFRAGMENTID_ISSET_ID, value);
    }

    public int getSourceId() {
      return this.SourceId;
    }

    public AnsAggreMessage_args setSourceId(int SourceId) {
      this.SourceId = SourceId;
      setSourceIdIsSet(true);
      return this;
    }

    public void unsetSourceId() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    /** Returns true if field SourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
    }

    public void setSourceIdIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.StartTime;
    }

    public AnsAggreMessage_args setStartTime(long StartTime) {
      this.StartTime = StartTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field StartTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield =
          org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
        case EDGE_FRAGMENT_ID:
          if (value == null) {
            unsetEdgeFragmentId();
          } else {
            setEdgeFragmentId((Integer) value);
          }
          break;

        case SOURCE_ID:
          if (value == null) {
            unsetSourceId();
          } else {
            setSourceId((Integer) value);
          }
          break;

        case START_TIME:
          if (value == null) {
            unsetStartTime();
          } else {
            setStartTime((Long) value);
          }
          break;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case EDGE_FRAGMENT_ID:
          return getEdgeFragmentId();

        case SOURCE_ID:
          return getSourceId();

        case START_TIME:
          return getStartTime();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case EDGE_FRAGMENT_ID:
          return isSetEdgeFragmentId();
        case SOURCE_ID:
          return isSetSourceId();
        case START_TIME:
          return isSetStartTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof AnsAggreMessage_args) return this.equals((AnsAggreMessage_args) that);
      return false;
    }

    public boolean equals(AnsAggreMessage_args that) {
      if (that == null) return false;
      if (this == that) return true;

      boolean this_present_EdgeFragmentId = true;
      boolean that_present_EdgeFragmentId = true;
      if (this_present_EdgeFragmentId || that_present_EdgeFragmentId) {
        if (!(this_present_EdgeFragmentId && that_present_EdgeFragmentId)) return false;
        if (this.EdgeFragmentId != that.EdgeFragmentId) return false;
      }

      boolean this_present_SourceId = true;
      boolean that_present_SourceId = true;
      if (this_present_SourceId || that_present_SourceId) {
        if (!(this_present_SourceId && that_present_SourceId)) return false;
        if (this.SourceId != that.SourceId) return false;
      }

      boolean this_present_StartTime = true;
      boolean that_present_StartTime = true;
      if (this_present_StartTime || that_present_StartTime) {
        if (!(this_present_StartTime && that_present_StartTime)) return false;
        if (this.StartTime != that.StartTime) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + EdgeFragmentId;

      hashCode = hashCode * 8191 + SourceId;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(StartTime);

      return hashCode;
    }

    @Override
    public int compareTo(AnsAggreMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison =
          Boolean.valueOf(isSetEdgeFragmentId()).compareTo(other.isSetEdgeFragmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeFragmentId()) {
        lastComparison =
            org.apache.thrift.TBaseHelper.compareTo(this.EdgeFragmentId, other.EdgeFragmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SourceId, other.SourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StartTime, other.StartTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AnsAggreMessage_args(");
      boolean first = true;

      sb.append("EdgeFragmentId:");
      sb.append(this.EdgeFragmentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("SourceId:");
      sb.append(this.SourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("StartTime:");
      sb.append(this.StartTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AnsAggreMessage_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsAggreMessage_argsStandardScheme getScheme() {
        return new AnsAggreMessage_argsStandardScheme();
      }
    }

    private static class AnsAggreMessage_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<AnsAggreMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AnsAggreMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE_FRAGMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.EdgeFragmentId = iprot.readI32();
                struct.setEdgeFragmentIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SourceId = iprot.readI32();
                struct.setSourceIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.StartTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AnsAggreMessage_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EDGE_FRAGMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.EdgeFragmentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeI32(struct.SourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.StartTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class AnsAggreMessage_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsAggreMessage_argsTupleScheme getScheme() {
        return new AnsAggreMessage_argsTupleScheme();
      }
    }

    private static class AnsAggreMessage_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<AnsAggreMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AnsAggreMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEdgeFragmentId()) {
          optionals.set(0);
        }
        if (struct.isSetSourceId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEdgeFragmentId()) {
          oprot.writeI32(struct.EdgeFragmentId);
        }
        if (struct.isSetSourceId()) {
          oprot.writeI32(struct.SourceId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.StartTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AnsAggreMessage_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.EdgeFragmentId = iprot.readI32();
          struct.setEdgeFragmentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.SourceId = iprot.readI32();
          struct.setSourceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.StartTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class AnsAggreMessage_result
      implements org.apache.thrift.TBase<AnsAggreMessage_result, AnsAggreMessage_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<AnsAggreMessage_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("AnsAggreMessage_result");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new AnsAggreMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new AnsAggreMessage_resultTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          AnsAggreMessage_result.class, metaDataMap);
    }

    public AnsAggreMessage_result() {}

    /** Performs a deep copy on <i>other</i>. */
    public AnsAggreMessage_result(AnsAggreMessage_result other) {}

    public AnsAggreMessage_result deepCopy() {
      return new AnsAggreMessage_result(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof AnsAggreMessage_result) return this.equals((AnsAggreMessage_result) that);
      return false;
    }

    public boolean equals(AnsAggreMessage_result that) {
      if (that == null) return false;
      if (this == that) return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(AnsAggreMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AnsAggreMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AnsAggreMessage_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsAggreMessage_resultStandardScheme getScheme() {
        return new AnsAggreMessage_resultStandardScheme();
      }
    }

    private static class AnsAggreMessage_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<AnsAggreMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AnsAggreMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AnsAggreMessage_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class AnsAggreMessage_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public AnsAggreMessage_resultTupleScheme getScheme() {
        return new AnsAggreMessage_resultTupleScheme();
      }
    }

    private static class AnsAggreMessage_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<AnsAggreMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AnsAggreMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AnsAggreMessage_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class PipeClose_args
      implements org.apache.thrift.TBase<PipeClose_args, PipeClose_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<PipeClose_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("PipeClose_args");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new PipeClose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new PipeClose_argsTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          PipeClose_args.class, metaDataMap);
    }

    public PipeClose_args() {}

    /** Performs a deep copy on <i>other</i>. */
    public PipeClose_args(PipeClose_args other) {}

    public PipeClose_args deepCopy() {
      return new PipeClose_args(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof PipeClose_args) return this.equals((PipeClose_args) that);
      return false;
    }

    public boolean equals(PipeClose_args that) {
      if (that == null) return false;
      if (this == that) return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(PipeClose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PipeClose_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PipeClose_argsStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeClose_argsStandardScheme getScheme() {
        return new PipeClose_argsStandardScheme();
      }
    }

    private static class PipeClose_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<PipeClose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PipeClose_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PipeClose_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class PipeClose_argsTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeClose_argsTupleScheme getScheme() {
        return new PipeClose_argsTupleScheme();
      }
    }

    private static class PipeClose_argsTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<PipeClose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PipeClose_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PipeClose_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }

  public static class PipeClose_result
      implements org.apache.thrift.TBase<PipeClose_result, PipeClose_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<PipeClose_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("PipeClose_result");

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY =
        new PipeClose_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY =
        new PipeClose_resultTupleSchemeFactory();

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<String, _Fields> byName =
          new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData>
        metaDataMap;

    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          PipeClose_result.class, metaDataMap);
    }

    public PipeClose_result() {}

    /** Performs a deep copy on <i>other</i>. */
    public PipeClose_result(PipeClose_result other) {}

    public PipeClose_result deepCopy() {
      return new PipeClose_result(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof PipeClose_result) return this.equals((PipeClose_result) that);
      return false;
    }

    public boolean equals(PipeClose_result that) {
      if (that == null) return false;
      if (this == that) return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(PipeClose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PipeClose_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PipeClose_resultStandardSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeClose_resultStandardScheme getScheme() {
        return new PipeClose_resultStandardScheme();
      }
    }

    private static class PipeClose_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<PipeClose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PipeClose_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PipeClose_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class PipeClose_resultTupleSchemeFactory
        implements org.apache.thrift.scheme.SchemeFactory {
      public PipeClose_resultTupleScheme getScheme() {
        return new PipeClose_resultTupleScheme();
      }
    }

    private static class PipeClose_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<PipeClose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PipeClose_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PipeClose_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot =
            (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
        org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())
              ? STANDARD_SCHEME_FACTORY
              : TUPLE_SCHEME_FACTORY)
          .getScheme();
    }
  }
}
